{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#imersao-back-end-mfx","title":"Imers\u00e3o Back-end MFX","text":"<p>Esse material ainda est\u00e1 em fase de desenvolvimento. Caso encontre algum erro fique a vontade para me notificar ou envie um Pull Request</p>"},{"location":"#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Bem Vindo ! A Imers\u00e3o de Back-end da MFX Academy </p> <p>Neste treinamento iremos abordar de forma imersivas os contextos, responsabilidades  e aplicabilidades de conhecimentos da fun\u00e7\u00e3o de um desenvolvedor back-end, usando como  principal ferramenta a linguagem de programa\u00e7\u00e3o javascript ao decorrer de toda a  nossa jornada, isso s\u00f3 ser\u00e1 poss\u00edvel porque iremos fazer o uso da plataforma nodejs  pela qual ser\u00e1 responsavel por executar todos os nossos scripts e c\u00f3digos do lado do  servidor. </p> <p>Possivelmente nesta etapa voc\u00ea j\u00e1 tenha passado por uma infinidade assuntos que foram ensinados nas nossas imers\u00f5es de front-end dos modulos anteriores da nossa forma\u00e7\u00e3o fullstack, caso n\u00e3o tenha  vindo pela forma\u00e7\u00e3o fullstack n\u00e3o tem problema aqui iremos desmistificar tudo sobre back-end e  capacit\u00e1-lo para que voc\u00ea possa se preparar para os seus novos desafios adquirindo mais profundidade e conhecimento sobre assuntos tais como (Desenvolvimento de APIs, cria\u00e7\u00e3o de scripts de  automa\u00e7\u00e3o, gerenciamento de dep\u00eandencias (NPM / YARN), manipu\u00e7\u00e3o de arquivos,  modelagem de banco de dados, implementa\u00e7\u00e3o de CRUD, boas pr\u00e1ticas de desenvolvimento,  cria\u00e7\u00e3o de teste unit\u00e1rios e documenta\u00e7\u00e3o) esses s\u00e3o alguns dos assuntos que iremos trabalhar juntos e muito mais! </p> <p>Ficou animado ent\u00e3o vamos nessa! \ud83e\udd18</p>"},{"location":"#recomendacoes","title":"Recomenda\u00e7\u00f5es \ud83d\ude80","text":"<p>Para aproveitar ao m\u00e1ximo desta imers\u00e3o, \u00e9 recomendado que voc\u00ea se planeje para que possa dedicar tempo para os estudo, al\u00e9m das aulas presenciais. Isso \u00e9 fundamental para lapidar seus conhecimentos e garantir um const\u00e2ncia em sua jornada de aprendizado. Os projetos propostos e os materias de apoio ser\u00e3o seu grande aliado para alcan\u00e7ar seus objetivos e assim conseguir alcan\u00e7ar seu proximo n\u00edvel!</p>"},{"location":"#ferramentas-necessarias","title":"Ferramentas Necess\u00e1rias \ud83e\uddf0","text":"<ol> <li>Um editor de texto ou IDE de sua escolha. Recomendo o vscode, durante as aulas estou usando o neovim</li> <li>Um terminal. Todos os exemplos feitos em aulas s\u00e3o explicados rodando o node no terminal, fique a vontade para usar o da sua prefer\u00eancia. Minha dica \u00e9 se estiver usando o vscode basta utilizar pr\u00f3prio disponibilizado pelo editor.</li> <li>Ter instalado uma vers\u00e3o do nodejs mais recente e compativel com seu sistema operacional.</li> <li>Uma conta no Github: para podermos subir todos os nossos codigos e assim voc\u00ea montar seu portif\u00f3lio de estudos.</li> <li>Como iremos trabalhar com APIs, \u00e9 importante termos instalado um client para montarmos nossas requisi\u00e7\u00f5es como (Postman / Insomnia)</li> </ol>"},{"location":"#sobre-o-instrutor","title":"Sobre o instrutor \u270c\ufe0f \ud83d\ude0e","text":"<p>Prazer me chamo Rodrigo Becker , atuo na \u00e1rea de tecnologia h\u00e1 mais de 11 anos, atualmente trabalho como Arquiteto de solu\u00e7\u00f5es em um grande banco. Tenho uma vasta experi\u00eancia em desenvolvimento de software, j\u00e1 atuei em diversos projetos desde de pequenas iniciativas \u00e0 grandes projetos com as mais diversas tecnologias e complexidades. Tive tamb\u00e9m a oportunidade por muito anos  de atuar como professor lecionando aulas de programa\u00e7\u00e3o. Meu objetivo \u00e9 fazer voc\u00ea sair desta imers\u00e3o preparado para seguir  sua jornada com mais conhecimento pr\u00e1tico, te\u00f3rico e obviamente com mais seguran\u00e7a para alcan\u00e7ar seus objetivos ! Conte comigo  nesta nova etapa que se inicia. </p> <p> Linkedin  Github </p>"},{"location":"#licenca","title":"Licen\u00e7a \ud83d\udcd6","text":"<p>Todo esse material, foi escrito e produzido por @RodrigoBecker em parceria com o Grupo MFX @copyright </p>"},{"location":"ementa/","title":"Ementa","text":""},{"location":"ementa/#vamos-la","title":"Vamos L\u00e1! \ud83d\udc4a","text":"<p>Bom, depois dessa introdu\u00e7\u00e3o, bora para o que interessa de verdade!  Nossa ementa! Na sess\u00e3o a seguir vou detalhar para voc\u00ea tudo nos m\u00ednimos  detalhes sobre que iremos trabalhar ao longo dessa imers\u00e3o, assim voc\u00ea j\u00e1  pode ter um pr\u00e9via do que estar\u00e1 por vir e se preparar mais ainda durante  nossas aulas! </p>"},{"location":"ementa/#sessao-1-configurando-o-nosso-ambiente","title":"Sess\u00e3o 1: Configurando o nosso ambiente","text":"Conte\u00fado LINK O que \u00e9 o nodejs? Acessar Entendendo sobre as vers\u00f5es do node Acessar Baixando o instalador do node e configurando seu path Acessar Rodando o node no terminal Acessar Configurando nosso ambiente de desenvolvimento (vscode) Acessar"},{"location":"ementa/#sessao-2-retomando-conceitos-do-linguagem-js-part-i","title":"Sess\u00e3o 2: Retomando Conceitos do Linguagem JS (Part I)","text":"Conte\u00fado LINK Como o Javascript Funciona? Acessar Entendendo a aplicabilidade do javascript (Client / Server) Acessar Retomando sintaxes e comandos b\u00e1sicos da linguagem javascript Acessar Padr\u00f5es da sintaxes Acessar Trabalhando com v\u00e1riaveis Acessar Trabalhando com escopos de variaveis (<code>var</code>/ <code>let</code> / <code>const</code>) Acessar Conven\u00e7\u00f5es de escrita de variaveis Acessar Tipos de dados primitivos do javascript Acessar Verificando tipos com a express\u00e3o <code>typeof</code> Acessar Convertendo string em tipos numericos <code>parseInt</code> <code>parseFloat</code> Acessar Express\u00f5es e operadores (Atribu\u00e7\u00e3o / Compara\u00e7\u00e3o / Aritm\u00e9ticos / L\u00f3gicos / Condicional tern\u00e1rio) Acessar Trabalhando com condicionais (<code>if</code> <code>else</code> / <code>else if</code> / <code>switch</code>) Acessar Trabalhando com la\u00e7os e itera\u00e7\u00f5es (<code>for</code> / <code>do while</code> / <code>while</code> / <code>break</code> / <code>continue</code> / <code>for in</code> / <code>for of</code> ) Acessar Trabalhando com express\u00f5es de controle de fluxo (<code>try</code> / <code>catch</code> / <code>finaly</code>) Acessar Trabalhando exce\u00e7\u00f5es (<code>throw</code>) Acessar Trabalhando com o strings (<code>split</code> / <code>slice</code> / <code>trim</code> / <code>match</code> / <code>replace</code>) Acessar Manipulando concatea\u00e7\u00f5es com template string Acessar"},{"location":"ementa/#sessao-3-retomando-conceitos-do-linguagem-js-part-ii","title":"Sess\u00e3o 3: Retomando Conceitos do Linguagem JS (Part II)","text":"Conte\u00fado LINK Trabalhando com arrays e objetos e suas opera\u00e7\u00f5es (<code>foreach</code> / <code>concat</code> / <code>push</code> / <code>pop</code> / <code>shify</code> / <code>reverse</code> / <code>map</code> / <code>filter</code> / <code>reduce</code>) Acessar Trabalhando com cole\u00e7\u00f5es de chave e valor (<code>map</code> / <code>set</code> / <code>json</code>) Acessar Manipulando objetos com operador spred <code>...</code> Acessar Trabalhando com fun\u00e7\u00f5es Acessar Entendedo as Estruturas de fun\u00e7\u00f5es Acessar Conve\u00e7\u00e3o de escrita de fun\u00e7\u00f5es Acessar Tipos de fun\u00e7\u00f5es (Declarativas / An\u00f4nimas / Arrow Functions / Callback / Auto Executoras) Acessar"},{"location":"ementa/#sessao-4-orientacao-a-objeto-oo-em-javascript","title":"Sess\u00e3o 4:  Orienta\u00e7\u00e3o a Objeto (OO) em Javascript","text":"Conte\u00fado LINK Trabalhando com classes em javascript Acessar Conven\u00e7\u00f5es de escrita Acessar Declarando classes Acessar Declarando metodos construtores com <code>construtor</code> Acessar Lidando com contexto usando refer\u00eancia <code>this</code> Acessar Trabalhando com atributos de uma classes Acessar Declarando Metodos Acessar Conven\u00e7\u00e3o dos metodos getters e setters (<code>get</code> / <code>set</code>) Acessar Inst\u00e2nciando objetos atrav\u00e9s da sintaxe <code>new</code> e <code>Object()</code> Acessar Entendendo sobre Heran\u00e7a de classes atrav\u00e9s do <code>extends</code> e <code>super</code> Acessar Definindo classes abstratas Acessar Defioindo classes concretas Acessar Sobrecarga de metodos e Polimorfimos Acessar Trabalhando com m\u00e9todos est\u00e1ticos atrav\u00e9s da sintaxe <code>static</code> Acessar"},{"location":"ementa/#sessao-5-javascript-assincrono","title":"Sess\u00e3o 5: Javascript Ass\u00edncrono","text":"Conte\u00fado LINK Trabalhando eventos Assincrono Acessar Entendendo sobre o event loop do javascript Acessar Trabalhando com callbacks Acessar Trabalhando com Promises Acessar Trabalhando com Async / Await Acessar"},{"location":"sessao_one/","title":"Configurando nosso ambiente \ud83d\udcbb","text":""},{"location":"sessao_two/","title":"Retomando Conceitos da Linguagem JS (Part I) \ud83d\udcd9","text":""},{"location":"sessao_two/#afinal-o-que-e-o-javascript","title":"Afinal o que \u00e9 o Javascript?","text":"<p>Javascript \u00e9 uma linguagem de programa\u00e7\u00e3o, E como todas as demais linguagens de programa\u00e7\u00e3o funciona traduzindo sintaxe  escrita de modo a converter as instru\u00e7\u00f5es para c\u00f3digo de m\u00e1quina.</p> <p></p> <p>O JavaScript \u00e9 amplamente categorizado como uma linguagem de cria\u00e7\u00e3o de scripts ou uma linguagem interpretada.</p>"},{"location":"sessao_two/#javascript-do-lado-cliente","title":"Javascript do lado cliente","text":"<p>O termo JavaScript do lado do cliente refere-se \u00e0 maneira como o JavaScript funciona em seu navegador. Nesse caso, o  mecanismo JavaScript est\u00e1 integrado ao c\u00f3digo do navegador.</p>"},{"location":"sessao_two/#javascript-do-lado-do-servidor","title":"Javascript do lado do servidor","text":"<p>O termo JavaScript do lado do servidor se refere ao uso da linguagem de codifica\u00e7\u00e3o na l\u00f3gica de back-end do servidor.  Nesse caso, o mecanismo JavaScript est\u00e1 diretamente no servidor.</p> <p></p>"},{"location":"sessao_two/#sintaxes-e-comandos-basicos-da-linguagem","title":"Sintaxes e comandos basicos  da linguagem","text":"<p>Toda linguagem de programa\u00e7\u00e3o precisa de uma padroniza\u00e7\u00e3o para reger as regras e o nivelamento da linguagem ao n\u00edvel global,  e para o JavaScript \u00e9 isso que \u00e9 o ECMAScript, a vers\u00e3o oficial da linguagem, tanto que o nome JavaScript, na verdade, \u00e9 uma tradi\u00e7\u00e3o do mercado de desenvolvimento, sendo o nome oficial da linguagem ECMAScript.</p> <ul> <li>No JavaScript, instru\u00e7\u00f5es s\u00e3o chamadas de\u00a0declara\u00e7\u00e3o\u00a0e s\u00e3o separadas por um ponto e v\u00edrgula (;)</li> <li> <p>JavaScript \u00e9\u00a0case-sensitive (Ou seja significa que caracteres em caixa alta e em caixa baixa s\u00e3o tratados de modo diferente) </p> </li> <li> <p>Uma\u00a0declara\u00e7\u00e3o\u00a0\u00e9 uma linha de c\u00f3digo que d\u00e1 comando para execu\u00e7\u00e3o de uma tarefa.</p> </li> </ul>"},{"location":"sessao_two/#declarando-variaveis","title":"Declarando variaveis","text":"<p>Refer\u00eancia MDN</p> <p>Voc\u00ea pode declarar uma vari\u00e1vel de tr\u00eas formas:</p> <ul> <li>Com a palavra chave\u00a0<code>[var]</code>. Por exemplo, var\u00a0<code>x = 42</code>. Esta sintaxe pode ser usada para declarar tanto vari\u00e1veis locais como vari\u00e1veis globais.</li> <li>Por simples adi\u00e7\u00e3o de valor. Por exemplo,\u00a0<code>x = 42</code>. Isso declara uma vari\u00e1vel global. Essa declara\u00e7\u00e3o gera um aviso de advert\u00eancia no JavaScript. Voc\u00ea n\u00e3o deve usar essa variante.</li> <li>Com a palavra chave\u00a0<code>[let]</code>. Por exemplo,\u00a0<code>let y = 13</code>. Essa sintaxe pode ser usada para declarar uma vari\u00e1vel local de escopo de bloco. </li> </ul> <p>Conven\u00e7\u00f5es de escrita</p> <ul> <li>Variaveis devem ser escritas com o padr\u00e3o camelCase exemplo:</li> </ul> <p><code>var oneVariable = 12</code></p> <ul> <li>Constantes devem ser escritas em caixa alta para melhorar a legibilidade do codigo  exemplo:</li> </ul> <p><code>const PERCENTAGE = 0.33</code></p>"},{"location":"sessao_two/#escopo-de-variavel","title":"Escopo de vari\u00e1vel","text":"<p>Quando voc\u00ea declara uma v\u00e1riavel fora de qualquer fun\u00e7\u00e3o, ela \u00e9 chamada de vari\u00e1vel\u00a0global, porque est\u00e1 dispon\u00edvel para qualquer outro c\u00f3digo no documento atual. Quando voc\u00ea declara uma vari\u00e1vel dentro de uma fun\u00e7\u00e3o, \u00e9 chamada de  vari\u00e1vel\u00a0local, pois ela est\u00e1 dispon\u00edvel somente dentro dessa fun\u00e7\u00e3o.</p> <p>Utiliza\u00e7\u00e3o da sintaxe do var para declara\u00e7\u00e3o de escopo global</p> <pre><code>if (true) {\n  var x = 5;\n}\nconsole.log(x); // 5\n</code></pre> <p>Utiliza\u00e7\u00e3o da sintaxe do var para declara\u00e7\u00e3o de escopo local</p> <pre><code>if (true) {\n  let y = 5;\n}\nconsole.log(y); // ReferenceError: y n\u00e3o est\u00e1 definido\n</code></pre>"},{"location":"sessao_two/#tipos-de-dados-primitivos","title":"Tipos de dados primitivos","text":"<ul> <li>String:\u00a0pode ser qualquer valor que esteja entre aspas simples ou aspas duplas e que,  normalmente, representam textos em geral. Podem ser letras, n\u00fameros e sinais de pontua\u00e7\u00e3o;</li> <li>Num\u00e9rico:\u00a0n\u00fameros;</li> <li>Symbol:\u00a0s\u00edmbolos;</li> <li>Booleano:\u00a0dados que apresentam apenas duas possibilidades de valores \u2013 true (verdadeiro) ou false (falso);</li> <li>Null e undefined:\u00a0s\u00e3o dados que representam vari\u00e1veis que, ou n\u00e3o possuem valor (null) ou, ent\u00e3o, est\u00e3o incompletas (undefined, ou seja, indefinidas);</li> <li>Objeto:\u00a0tipo de dado que funciona como uma entidade independente, no qual h\u00e1 um conjunto de  atributos aninhados a uma vari\u00e1vel.</li> </ul> <p>JavaScript \u00e9 uma linguagem dinamicamente tipada. Isso significa que voc\u00ea n\u00e3o precisa especificar o tipo de dado de uma vari\u00e1vel quando declar\u00e1-la, e tipos de dados s\u00e3o convertidos automaticamente conforme a necessidade durante a execu\u00e7\u00e3o do script.</p> <pre><code>var oneVariable = null // empty variable\n\noneVariable = 1 // number\noneVariable = \"2\" // string\noneVariable = \"foo\" // string\noneVariable = [\"foo\", \"bar\"] //array \noneVariable = true //bolean \noneVariable = {\n    \"field\" : \"value\"\n} // object\n</code></pre> <p>Em express\u00f5es envolvendo valores num\u00e9rico e string com o operador <code>+</code>, O JavaScript converte valores num\u00e9rico para strings. Por exemplo, considere a seguinte declara\u00e7\u00e3o:</p> <pre><code>x = \"answer\" + 42; // answer 42\"\ny = 42 + \"answer\"; // \"42 is the answer\"\n</code></pre> <p>Podemos verificar o tipo de dado atrav\u00e9s de um operador reservado do ecmascript chamado <code>typeof</code></p> <pre><code>var oneVariable = null // empty variable\ntypeof oneVariable // object\n\noneVariable = 1 // number\ntypeof oneVariable // number\n</code></pre>"},{"location":"sessao_two/#convertendo-tipos-de-dados","title":"Convertendo tipos de dados","text":"<p>Quando estamos falando de n\u00fameros, podemos utilizar express\u00f5es para realizar a convers\u00e3o de dados do tipo string em outros formatos como num\u00e9rico e ponto flutuante.</p> <pre><code>// ------------ expression parseInt ----------//\nvar oneVariable = \"1\" // string\nconsole.log(typeof(oneVariable)) // string \n\noneVariable = parseInt(oneVariable) \nconsole.log(typeof(oneVariable)) // number \n\n//-------------- expression parseFloat -----------//\nvar oneVariable = \"1.10\" // string\nconsole.log(typeof(oneVariable)) // string \n\noneVariable = parseFloat(oneVariable) \nconsole.log(typeof(oneVariable)) // float \n</code></pre>"},{"location":"sessao_two/#expressoes-e-operadores","title":"Express\u00f5es e Operadores","text":"<p>Como qualquer outra linguagem de program\u00e7\u00e3o, o javascript faz uso em sua sintaxe para realizar  determinadas opera\u00e7\u00f5es. Podemos categorizar esses operadores em:</p> <ul> <li> <p>Operador de Atribui\u00e7\u00e3o:</p> <p>Um operador de atribui\u00e7\u00e3o atribui um valor ao operando \u00e0 sua esquerda baseado no valor do operando \u00e0 direita, usando o simbolo <code>=</code>, logo temos os seguintes exemplo <code>x = y</code> / <code>x = 10</code> / <code>x = \"Hello Word\"</code> </p> <p>Algumas das varia\u00e7\u00f5es do operador:</p> Nome Operador encurtado Significado Atribui\u00e7\u00e3o x = y x = y Atribui\u00e7\u00e3o de adi\u00e7\u00e3o x += y x = x + y Atribui\u00e7\u00e3o de subtra\u00e7\u00e3o x -= y x = x - y Atribui\u00e7\u00e3o de multiplica\u00e7\u00e3o x *= y x = x * y Atribui\u00e7\u00e3o de divis\u00e3o x /= y x = x / y Atribui\u00e7\u00e3o de resto x %= y x = x % y </li> <li> <p>Operador de compara\u00e7\u00e3o:</p> <p>Um operador de compara\u00e7\u00e3o compara seus operandos e retorna um valor l\u00f3gico baseado em se a compara\u00e7\u00e3o \u00e9 verdadeira. Os operandos podem ser num\u00e9ricos, strings, l\u00f3gicos ou objetos. Logo temos os seguintes  exemplos <code>x == 10</code> / <code>y != x</code> </p> <p>Algumas das varia\u00e7\u00f5es do operador:</p> <pre><code>    var num1 = 3;\n    var num2 = 4;\n</code></pre> Operador Descri\u00e7\u00e3o Exemplos que retornam verdadeiro Igual (==) Retorna verdadeiro caso os operandos sejam iguais. <code>num1 == 3  num1 == \"3\" 3 == '3'</code> N\u00e3o igual (!=) Retorna verdadeiro caso os operandos n\u00e3o sejam iguais. <code>num1 != 4 num2 != \"3\"</code> Estritamente igual (===)     Retorna verdadeiro caso os operandos sejam iguais e do mesmo tipo. <code>num1 === 3</code> Estritamente n\u00e3o igual (!==)     Retorna verdadeiro caso os operandos n\u00e3o sejam iguais e/ou n\u00e3o sejam do mesmo tipo. <code>num1 !== \"3\" 3 !== '3'</code> Maior que (&gt;) Retorna verdadeiro caso o operando da esquerda seja maior que o da direita. <code>num2 &gt; num1 \"12\" &gt; 2</code> Maior que ou igual (&gt;=)  Retorna verdadeiro caso o operando da esquerda seja maior ou igual ao da direita. <code>num2 &gt;= num1 num1 &gt;= 3</code> Menor que (&lt;) Retorna verdadeiro caso o operando da esquerda seja menor que o da direita. <code>num1 &lt; num2 \"12\" &lt; \"2\"</code> Menor que ou igual (&lt;=) Retorna verdadeiro caso o operando da esquerda seja menor ou igual ao da direita. <code>num1 &lt;= num2 num2 &lt;= 5</code> </li> <li> <p>Operadores aritm\u00e9tico:</p> <p>Operadores aritm\u00e9ticos tomam valores num\u00e9ricos (sejam literais ou vari\u00e1veis) como seus operandos e retornam um \u00fanico valor n\u00famerico.  Os operadores aritm\u00e9ticos padr\u00e3o s\u00e3o os de soma <code>(+)</code>, subtra\u00e7\u00e3o <code>(-)</code>, multiplica\u00e7\u00e3o <code>(*)</code> e divis\u00e3o <code>(/)</code></p> Operador Descri\u00e7\u00e3o Exemplo M\u00f3dulo (%) Operador bin\u00e1rio. Retorna o inteiro restante da divis\u00e3o dos dois operandos. 12 <code>%</code> 5 retorna 2. Incremento (++) Operador un\u00e1rio. Adiciona um ao seu operando. Se usado como operador prefixado <code>(++x)</code>, retorna o valor de seu operando ap\u00f3s a adi\u00e7\u00e3o. Se usado como operador p\u00f3sfixado <code>(x++)</code>, retorna o valor de seu operando antes da adi\u00e7\u00e3o. Se x \u00e9 3, ent\u00e3o ++x define x como 4 e retorna 4, enquanto x++ retorna 3 e, somente ent\u00e3o, define x como 4. Decremento (--) Operador un\u00e1rio. Subtrai um de seu operando. O valor de retorno \u00e9 an\u00e1logo \u00e0quele do operador de incremento. Se x \u00e9 3, ent\u00e3o <code>(--x)</code> define x como 2 e retorna 2, enquanto <code>(x--)</code> retorna 3 e, somente ent\u00e3o, define x como 2. Nega\u00e7\u00e3o (-) Operador un\u00e1rio. Retorna a nega\u00e7\u00e3o de seu operando. Se x \u00e9 3, ent\u00e3o <code>-x</code> retorna -3. Adi\u00e7\u00e3o (+) Operador un\u00e1rio. Tenta converter o operando em um n\u00famero, sempre que poss\u00edvel. <code>+\"3\"</code> retorna 3 </li> <li> <p>Operadores l\u00f3gicos: </p> <p>Operadores l\u00f3gicos s\u00e3o utilizados tipicamente com valores booleanos (l\u00f3gicos); neste caso, retornam um valor booleano <code>true</code> ou <code>false</code>.</p> Operador Utiliza\u00e7\u00e3o Descri\u00e7\u00e3o AND l\u00f3gico <code>(&amp;&amp;)</code> expr1 <code>&amp;&amp;</code> expr2 (E l\u00f3gico) - Retorna expr1 caso possa ser convertido para falso; sen\u00e3o, retorna expr2. Assim, quando utilizado com valores booleanos, &amp;&amp; retorna verdadeiro caso ambos operandos sejam verdadeiros; caso contr\u00e1rio, retorna falso. OU l\u00f3gico <code>(||)</code> expr1 <code>||</code> expr2 (OU l\u00f3gico) - Retorna expr1 caso possa ser convertido para verdadeiro; sen\u00e3o, retorna expr2. Assim, quando utilizado com valores booleanos, NOT l\u00f3gico <code>(!)</code> <code>!</code>expr (Nega\u00e7\u00e3o l\u00f3gica) Retorna falso caso o \u00fanico operando possa ser convertido para verdadeiro; sen\u00e3o, retorna verdadeiro. </li> <li> <p>Operador Tern\u00e1rio condicional:</p> <p>O operador condicional (tern\u00e1rio) \u00e9 o \u00fanico operador JavaScript que possui tr\u00eas operandos. Este operador \u00e9 frequentemente usado como um atalho para a instru\u00e7\u00e3o <code>if</code></p> <pre><code> condition ? expr1 : expr2\n</code></pre> <pre><code>// ----- option one ------\n\nlet age = 16;\nage &gt; 18 ? console.log(\"yes! continue\"): console.log(\"no! stop\");\n\n// ---- option two -------\n\nlet stop = false,\nage = 23;\n\nage &gt; 18\n    ? (alert(\"OK, you can go.\"), location.assign(\"continue.html\"))\n    : ((stop = true), alert(\"Sorry, you are much too young!\"));\n\n// ------ option three ----\n\nlet age = 16;\nlet url =\nage &gt; 18\n? (alert(\"OK, you can go.\"),\n  // alert returns \"undefined\", but it will be ignored because\n  // isn't the last comma-separated value of the parenthesis\n  \"continue.html\") // the value to be assigned if age &gt; 18\n: (alert(\"You are much too young!\"),\n  alert(\"Sorry :-(\"),\n  // etc. etc.\n  \"stop.html\"); // the value to be assigned if !(age &gt; 18)\n</code></pre> </li> </ul>"},{"location":"sessao_two/#trabalhando-com-condicionais","title":"Trabalhando com condicionais","text":"<p>Em qualquer linguagem de programa\u00e7\u00e3o, o c\u00f3digo precisa tomar decis\u00f5es e realizar a\u00e7\u00f5es de acordo,  dependendo de diferentes entradas. As declara\u00e7\u00f5es condicionais nos permitem representar tomadas de  decis\u00e3o como estas em JavaScript, a partir da escolha que deve ser feita (por exemplo, \"um biscoito ou dois\"), ao resultado obtido dessas escolhas (talvez o resultado de \"comer um biscoito\" possa ser \"ainda sentido fome \", e o resultado de \"comer dois biscoitos\" pode ser \"sentir-se satisfeito\" por exemplo.</p> <p>De longe o tipo mais comum de declara\u00e7\u00e3o condicional que voc\u00ea usar\u00e1 em JavaScript \u00e9 com base na express\u00e3o <code>if</code> <code>else</code></p> <pre><code>if (condicao) {\n  // codigo para executar caso a condi\u00e7\u00e3o seja verdadeira\n} else {\n  // sen\u00e3o, executar este c\u00f3digo\n}\n</code></pre> <p>Ent\u00e3o vamos partir de um contexto mais proximo de real para exemplificar usando o javascript para resolver uma  decis\u00e3o condicional, vejamos abaixo:</p> <p>Precisamos construir uma aplica\u00e7\u00e3o que realize o login de usu\u00e1rio ao sistema, e para isso precisamos validar uma condi\u00e7\u00f5es tais como:</p> <ol> <li>O usu\u00e1rio que est\u00e1 tentando fazer login \u00e9 um usuario cadastrado</li> <li>O usu\u00e1rio que est\u00e1 tentando fazer login possui algum tipo de status que impe\u00e7a ele entrar no sistema</li> <li>Caso o usu\u00e1rio consiga entrar no sistema para onde ele deve ser direcionado</li> </ol> <pre><code>const userData = {\n    nome: \"foo bar\",\n    email: \"foobar@contact.com\",\n    status: \"ACTIVE\",\n    password: \"123456\"\n}\n\nconst userInputLogin = {\n    loginUser: \"foobar@contact.com\",\n    loginPassword: \"12345\"\n}\n\n// apply conditionals\n\nif (userInputLogin.loginUser == userData.email  &amp;&amp; \n    userInputLogin.loginPassword == userData.password) {\n\n    console.log(\"login Success!\");\n\n    if (userData.status == \"ACTIVE\") {\n        console.log(\"Redirect home\");\n    } else if (userData.status == \"BLOCKED\") {\n        console.log(\"show alert user! No redirect home\")\n    }\n} else {\n    console.log(\"login Invalid!\")\n}\n</code></pre> <p>Veja que na linha <code>23</code> do nosso c\u00f3digo, fazemos a express\u00e3o <code>else if</code> que nada mais \u00e9 que permitir que o  javascript encadei outras tomadas de decis\u00f5es.</p> <p>Outra forma de trabalhar com tomadas de decis\u00f5es \u00e9 atrav\u00e9s da express\u00e3o <code>switch case</code>, por\u00e9m essa tem uma  particularidade que \u00e9, com um unico valor de entrada podemos fazer valida\u00e7\u00f5es de forma encadeada por exemplo:</p> <pre><code>const userData = {\n    nome: \"foo bar\",\n    email: \"foobar@contact.com\",\n    status: \"ACTIVE\",\n    password: \"123456\"\n}\n\nswitch (status) {\n\n    case \"ACTIVE\":\n        console.log(\"user is allowed login\");\n        break;\n    case \"BLOCKED\":\n        console.log(\"user is not allowed login\");\n        break;\n    case \"INACTIVE\":\n        console.log(\"user is not allowed login\");\n        break;\n    default:\n        console.log(\"do not do anything!\")\n        break;\n}\n</code></pre> <p>Veja que neste exemplo acima fizemos a checagem apenas de um unico valor de entrada, no caso o status  do usuario, passamos a executar uma valida\u00e7\u00e3o encadeada, onde de acordo com <code>case</code> meu codigo tem uma saida diferente, e mais usamos essa express\u00e3o <code>break</code> para que quando a condi\u00e7\u00e3o for atendida ele simplesmente quebra  a continu\u00e7\u00e3o dos demais <code>case</code>, ou seja nosso c\u00f3digo iria entrar na primeiro caso e como o status <code>ACTIVE</code> \u00e9 uma  condi\u00e7\u00e3o valida, ele n\u00e3o executaria as demais linhas abaixo, indo direto para linha <code>22</code> que \u00e9 o fim da instru\u00e7\u00e3o do <code>switch case</code></p>"},{"location":"sessao_two/#trabalhando-com-lacos-e-iteracoes","title":"Trabalhando com la\u00e7os e itera\u00e7\u00f5es","text":""}]}